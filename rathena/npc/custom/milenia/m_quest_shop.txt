//===== rAthena Script =======================================
//= Euphy's Quest Shop
//===== By: ==================================================
//= Euphy
//===== Current Version: =====================================
//= 1.6a
//===== Compatible With: =====================================
//= rAthena SVN r16862+
//===== Description: =========================================
//= A dynamic quest shop based on Lunar's, with easier config.
//= Includes support for multiple shops & cashpoints.
//= Item Preview script by ToastOfDoom.
//===== Additional Comments: =================================
//= 1.0 Initial script.
//= 1.2 Added category support.
//= 1.3 More options and fixes. 
//= 1.4 Added debug settings.
//= 1.5 Replaced categories with shop IDs.
//= 1.6 Added support for purchasing stackables.
//= 1.6a Added support for previewing costumes and robes.
//============================================================

// Shop NPCs -- supplying no argument displays entire menu.
//	callfunc "qshop"{,<shop ID>{,<shop ID>{,...}}};
//============================================================
milenia,142,189,11	script	Recorn's Works#2	622,{ callfunc "qshop",1,3; }// call shop 1,2,3
milenia,144,190,11	script	Primelda's Headgear	562,{ callfunc "qshop",4,5,6; }// call shop 4,5,6
milenia,146,191,11	script	Yokociputra's Quest	762,{ callfunc "qshop",7; }// call shop 7
milenia,169,61,5	script	Doram Charm	877,{ callfunc "qshop",8; }// call shop 8
milenia,148,192,11	script	Symphony Quest	10191,{ callfunc "qshop",9,10; }// call shop 9
prt_cas,88,292,5	script	Commander Aaron	628,{ callfunc "qshop",11; }// call shop 11
prt_cas,86,292,5	script	Commander Bobby	470,{ callfunc "qshop",12; }// call shop 12
prt_cas,99,292,5	script	Minister of Defence 	684,{ callfunc "qshop",13; }// call shop 13
prt_cas,101,292,5	script	Minister of Supplies	728,{ callfunc "qshop",14; }// call shop 14

// Script Core
//============================================================
-	script	quest_shop	-1,{ 
function Add; function Chk; function Slot; function A_An;
OnInit:
	freeloop(1);

// -----------------------------------------------------------
//  Basic shop settings.
// -----------------------------------------------------------

	set .Announce,1;	// Announce quest completion? (1: yes / 0: no)
	set .ShowSlot,1;	// Show item slots? (2: all equipment / 1: if slots > 0 / 0: never)
	set .ShowID,0;  	// Show item IDs? (1: yes / 0: no)
	set .ShowZeny,0;	// Show Zeny cost, if any? (1: yes / 0: no)
	set .MaxStack,100;	// Max number of quest items purchased at one time.

// -----------------------------------------------------------
//  Points variable -- optional quest requirement.
//	setarray .Points$[0],"<variable name>","<display name>";
// -----------------------------------------------------------

	setarray .Points$[0],"#CASHPOINTS","Cash Points";

// -----------------------------------------------------------
//  Shop IDs -- to add shops, copy dummy data at bottom of file.
//	setarray .Shops$[1],"<Shop 1>","<Shop 2>"{,...};
// -----------------------------------------------------------

	setarray .Shops$[1],"Headgears","Wings","Mora Equipments","Other","Cute Headgears","Cool Headgears","New Headgear","Doram Charms","Crimson Equipments","3rd Job Headgear","Weapons Alpha","Weapons Beta","Armor","Food Ration";

// -----------------------------------------------------------
//  Quest items -- do NOT use a reward item more than once!
//	Add(<shop ID>,<reward ID>,<reward amount>,
//	    <Zeny cost>,<point cost>,
//	    <required item ID>,<required item amount>{,...});
// -----------------------------------------------------------

	Add(1,5022,1,1000000,0,7086,1,969,10,999,40,1003,50,984,2);
	Add(1,5032,1,100000,0,1059,250,2221,1,2227,1,7063,600);
	Add(1,5027,1,100000,0,2252,1,1036,400,7001,50,4052,1);
	Add(1,5045,1,100000,0,2252,1,1054,450,943,200);
	Add(1,5372,1,0,0,671,25,5058,1,7166,500,982,10);
	Add(1,18600,1,0,0,671,45,5016,1,2747,5,5057,1,7436,100,983,10);
	Add(1,5457,1,0,0,671,20,10007,10,1234,1,2214,1,982,10);
	add(1,5495,1,0,0,671,20,12028,10,1468,1,996,50,7162,500,615,5);
	add(1,5293,1,0,0,671,10,7134,100,577,100,523,100,12085,10,544,10);
	add(1,5401,1,0,0,671,15,2276,1,7799,10,734,100,4412,1);
	add(1,5325,1,0,0,671,30,5104,1,5034,1,4021,1,7095,500,1971,5);
	add(1,5362,1,0,0,671,10,4230,1,7157,200,7156,400,7117,200);
	add(1,18505,1,0,0,671,5,1615,1,932,300,628,300);
	add(1,5518,1,0,0,671,60,923,666,5160,1,4337,1,7438,100,750,10);
	add(1,5377,1,0,0,671,30,2268,10,4058,1,6214,100,7035,10);
	add(1,5013,1,0,0,671,40,5072,1,6033,10,6023,300,7008,10,4065,1);
	add(1,18539,1,0,0,671,50,7752,1000,5162,1,7291,5,4505,5);
	add(1,5312,1,0,0,671,30,2289,1,7301,500,4035,1,12736,50);
	add(1,5383,1,0,0,671,30,1726,1,2769,1,5016,1,4094,10);
	add(1,5373,1,0,0,671,30,7510,3,7511,300,2285,1);
	add(1,5379,1,0,0,671,40,6510,400,7166,300,7165,300,7292,10);
	add(1,5393,1,0,0,671,15,7561,150,5041,1,7189,150);
	add(1,5520,1,0,0,671,60,2283,1,2214,1,6087,10,6088,10);
	add(1,5564,1,0,0,671,20,2235,1,969,10,6395,50);
	add(1,5573,1,0,0,671,60,4098,1,1021,500,9019,1);
	add(1,5757,1,0,0,671,20,2229,1,4010,3,999,100,7095,50);
	add(1,5653,1,0,0,671,20,7799,100,7023,5,6089,3,2255,1);

	//Add(2,26002,1,0,0,674,5,7063,1000,6395,1000,5074,1,2254,1,4001,100);
	//Add(2,26003,1,0,0,674,5,1039,1000,6089,500,6245,500,5254,1,4088,10);

	Add(3,1224,1,0,0,7297,30,969,10,999,50,714,10); //Sword Breaker
	Add(3,1225,1,0,0,7292,30,969,10,999,50,714,10); // Mail Breaker
	Add(3,2475,1,0,0,6380,10); // Ur's Greaves
	Add(3,2574,1,0,0,6380,10);
	Add(3,15036,1,0,0,6380,10);
	Add(3,2883,1,0,0,6380,10);
	Add(3,2476,1,0,0,6380,10);
	Add(3,2575,1,0,0,6380,10);
	Add(3,15037,1,0,0,6380,10);
	Add(3,2884,1,0,0,6380,10);
	Add(3,2479,1,0,0,6380,10);
	Add(3,2580,1,0,0,6380,10);
	Add(3,15042,1,0,0,6380,10);
	Add(3,2890,1,0,0,6380,10);
	Add(3,2480,1,0,0,6380,10);
	Add(3,2581,1,0,0,6380,10);
	Add(3,15043,1,0,0,6380,10);
	Add(3,2891,1,0,0,6380,10);
	Add(3,2477,1,0,0,6380,10);
	Add(3,2577,1,0,0,6380,10);
	Add(3,15038,1,0,0,6380,10);
	Add(3,2886,1,0,0,6380,10);
	Add(3,2478,1,0,0,6380,10);
	Add(3,2578,1,0,0,6380,10);
	Add(3,15039,1,0,0,6380,10);
	Add(3,2887,1,0,0,6380,10);
	
	//Arch Bishop
	Add(3,2156,1,0,0,6380,10);
	Add(3,2864,1,0,0,6380,10);
	Add(3,2865,1,0,0,6380,10);
	Add(3,2866,1,0,0,6380,10);
	Add(3,1657,1,0,0,6380,10);
	Add(3,16013,1,0,0,6380,10);
	Add(3,2471,1,0,0,6380,10);
	Add(3,2472,1,0,0,6380,10);
	Add(3,15029,1,0,0,6380,10);
	Add(3,15030,1,0,0,6380,10);
	Add(3,2569,1,0,0,6380,10);
	Add(3,2570,1,0,0,6380,10);
	
	//Warlock
	Add(3,2007,1,0,0,6380,10);
	Add(3,2008,1,0,0,6380,10);
	Add(3,2009,1,0,0,6380,10);
	Add(3,2010,1,0,0,6380,10);
	Add(3,15025,1,0,0,6380,10);
	Add(3,15026,1,0,0,6380,10);
	Add(3,15027,1,0,0,6380,10);
	Add(3,15028,1,0,0,6380,10);
	Add(3,2859,1,0,0,6380,10);
	Add(3,2860,1,0,0,6380,10);
	Add(3,2861,1,0,0,6380,10);
	Add(3,2862,1,0,0,6380,10);
	Add(3,2467,1,0,0,6380,10);
	Add(3,2468,1,0,0,6380,10);
	Add(3,2469,1,0,0,6380,10);
	Add(3,2470,1,0,0,6380,10);

	Add(4,9901,1,0,0,1234,1,5069,1,1022,1); //Moonlight
	Add(4,9902,1,0,0,4433,10,994,10,1471,1,1133,1); //Ifrit
	Add(4,9903,1,0,0,7510,10,2357,1,2524,1,2421,1,2115,1); //Valkyrie
	Add(4,9904,1,0,0,5019,1,2287,1,1135,1,4073,10,2212,1); //Drake
	Add(4,9905,1,0,0,7451,1,12080,10,7745,50,7746,50,7747,50,7748,50); //Delate
	Add(4,9906,1,0,0,7300,5,2296,1,4200,1); //TaoGunka
	Add(4,9907,1,0,0,6091,1,4449,1); //Nydhoggr
	Add(4,9908,1,0,0,1175,1,7564,300,7563,300); //Atroce
	Add(4,9909,1,0,0,1235,1,1165,4230,3,4282,3); //Samurai
	Add(4,9910,1,0,0,7450,3,7436,5,7437,5,7438,5,7439,5); //Thanatos

	Add(5,5133,1,0,0,671,1,4150,1,7107,250,7106,400);
	Add(5,5182,1,0,0,671,1,4023,1,920,400,9010,1);
	Add(5,5454,1,0,0,671,1,4029,1,7030,300,9010,1);
	Add(5,5186,1,0,0,671,1,4280,1,1032,300,12002,20);
	Add(5,5455,1,0,0,671,1,4280,1,1033,300,12002,20);
	Add(5,5129,1,0,0,671,1,4015,1,574,30,916,100,7203,100);
	Add(5,5183,1,0,0,671,1,1049,1,574,30,916,100,7203,100);
	Add(5,5020,1,0,0,671,1,2210,1,1059,300,7166,300);
	Add(5,5387,1,0,0,671,1,2213,1,1059,300,7165,300);
	Add(5,5099,1,0,0,671,1,2213,1,4195,1,6394,100,980,1);
	Add(5,5185,1,0,0,671,1,7298,300,706,10,7198,300,2270,1);
	Add(5,5187,1,0,0,671,1,5085,1,7213,300,975,5);
	Add(5,5776,1,0,0,671,1,994,10,7097,500,7098,500,7451,1);
	Add(5,5297,1,0,0,671,1,2254,1,2282,1,7063,200,6394,100);
	Add(5,5456,1,0,0,671,1,2227,1,582,250,568,250,976,1);
	Add(5,5317,1,0,0,671,1,2227,1,995,10,544,100,1249,1);
	Add(5,5382,1,0,0,671,1,2244,1,5083,1,530,100,538,100);
	Add(5,5404,1,0,0,671,1,5085,1,7441,50,1059,100,978,1);
	Add(5,5140,1,0,0,671,1,2209,1,1059,100,975,1);
	Add(5,5440,1,0,0,671,1,2209,1,1059,100,978,1);
	Add(5,5438,1,0,0,671,1,2209,1,1059,100,979,1);
	Add(5,5439,1,0,0,671,1,2209,1,1059,100,975,1);
	Add(5,5441,1,0,0,671,1,2209,1,1059,100,982,1);
	Add(5,18641,1,0,0,671,1,5045,1,2209,2,7099,350,7117,200);
	Add(5,5793,1,0,0,671,1,2209,1,607,10,608,10,610,10);
	Add(5,5278,1,0,0,671,1,2250,1,7166,200,980,1);
	Add(5,5381,1,0,0,671,1,2236,1,909,200,4001,1);
	Add(5,5255,1,0,0,671,1,916,300,7126,100,4001,1);
	Add(5,5255,1,0,0,671,1,916,300,7126,100,4001,1);
	Add(5,5255,1,0,0,671,1,916,300,7126,100,4001,1);
	Add(5,5417,1,0,0,671,1,916,300,7115,300,9005,1);
	Add(5,5283,1,0,0,671,1,916,300,6394,100,4117,1);
	Add(5,5671,1,0,0,671,1,7071,250,7799,100,4001,1);
	Add(5,5296,1,0,0,671,1,1022,200,4159,1);
	Add(5,5233,1,0,0,671,1,5058,1,978,1);
	Add(5,5231,1,0,0,671,1,5058,1,979,1);
	Add(5,5230,1,0,0,671,1,5058,1,982,1,981,1);
	Add(5,5232,1,0,0,671,1,5058,1,982,1,975,1);
	Add(5,5234,1,0,0,671,1,5058,1,976,1);
	Add(5,5765,1,0,0,671,1,5083,1,4252,1,4133,1,983,1);

	Add(6,5339,1,0,0,671,1,2272,1,7151,50,7111,50);
	Add(6,5336,1,0,0,671,1,2272,1,7151,50,7111,50);
	Add(6,5337,1,0,0,671,1,2272,1,7151,50,7111,50);
	Add(6,5338,1,0,0,671,1,2272,1,7151,50,7111,50);
	Add(6,5346,1,0,0,671,1,2272,1,7151,50,7111,50);
	Add(6,5474,1,0,0,671,1,2272,1,7151,50,7111,50,983,1);
	Add(6,5151,1,0,0,671,1,5001,1,7319,200,4001,2);
	Add(6,5470,1,0,0,671,1,2296,1,2211,1,7751,50);
	Add(6,5102,1,0,0,671,1,2278,1,7568,500,2203,1);
	Add(6,5138,1,0,0,671,1,2252,1,7099,200);
	Add(6,5152,1,0,0,671,1,2234,1,675,200,732,10,722,20);
	Add(6,5181,1,0,0,671,1,7511,50,7340,200,12020,100,4028,1);
	Add(6,5135,1,0,0,671,1,2276,1,7095,20,7321,100,4010,1);
	Add(6,5276,1,0,0,671,1,2255,1,2210,1,1039,500,4122,1);
	Add(6,5254,1,0,0,671,1,2255,1,5035,1,7205,200,983,1);
	Add(6,5304,1,0,0,671,1,2502,1,7205,150,7315,300);
	Add(6,5319,1,0,0,671,1,2254,1,5035,1,4001,1);
	Add(6,5210,1,0,0,671,1,2254,1,7063,400,2210,1,4001,5);
	Add(6,5360,1,0,0,671,1,5057,1,1023,350,4257,2);
	add(6,5574,1,0,0,671,1,7315,100,7201,150,738,1);
	add(6,5442,1,0,0,671,1,7441,10,1034,100,5052,1);
	Add(6,2296,1,0,0,675,5,999,100,2243,1);
	
	Add(7,5361,1,0,0,10019,1,2265,1,7097,50,704,10,605,10,526,50,7216,50,671,1); // Gangster Scarf
	Add(7,5208,1,0,0,1097,100,1553,1,1554,1,1570,1,1556,1,7015,200,671,1); // Rideword Hat
	Add(7,5283,1,150000,0,9005,1,5015,1); // Chick Hat
	Add(7,5376,1,0,0,2255,1,4269,1,1039,1,671,5); // Flying Evil Wing
	Add(7,2410,1,0,0,2406,1,4107,1,4097,1,4100,1,985,50,999,100,671,50); // Sleipnir
	Add(7,18518,1,0,0,2254,1,2286,1,603,5,747,25,999,30,7321,200,671,2); // Angel wing ears
	Add(7,18519,1,0,0,2255,1,2286,1,603,5,747,25,999,30,7321,200,671,2); //Evil wing ears
	Add(7,18607,1,0,0,5040,1,603,5,747,25,671,5); // Blush 
	Add(7,18673,1,0,0,2249,1,4450,1,2626,3,6023,100,7448,150,671,2); // Drooping Pope
	Add(7,2910,1,0,0,6509,300,6498,100,983,20,671,5); // Bakonawa Agimat Tattoo
	Add(7,2911,1,0,0,6509,300,6498,100,978,20,671,5); // Bangungot Agimat Tattoo
	Add(7,2907,1,0,0,6509,300,6498,100,975,20,671,5); // Buwaya Agimat Tattoo
	Add(7,5359,1,0,0,2284,1,2247,1,2322,1,507,10,671,1); // Ship Captain Hat
	Add(7,2881,1,0,0,2603,1,4505,1,4004,1,671,5); // Orleans Necklace
	Add(7,2899,1,0,0,2726,1,4145,1,4298,1,671,1); // Sound Amplification Device
	Add(7,5305,1,0,0,1023,250,624,3,2287,1,1249,1,671,1); // Pirate Dagger
	Add(7,18657,1,0,0,4142,1,7063,25,2286,1,671,5); // Pegasus Wing Ears
	Add(7,18609,1,0,0,7166,1,1041,1,671,1); // Dark Blinder
	Add(7,18597,1,0,0,969,20,2246,1,724,25,671,4); // Mercury Riser	
	Add(7,5579,1,0,0,2280,1,7326,5,930,50,671,15); // Wanderer's Sakkat	
	Add(7,5753,1,0,0,2252,1,6395,10,717,50,716,50,671,3); // Magic Stone Hat	
	Add(7,18978,1,0,0,5753,1,1629,1,5045,1,671,20); // Old Magic Stone Hat	
	Add(7,18611,1,500000,0,2203,1,2203,1,603,5,747,5,999,30,671,1); // Black Glasses
	
	Add(8,28422,1,0,0,25142,30); // Shining Eggplant Talisman
	Add(8,28423,1,0,0,25142,30); // FRESH TUNA TALISMAN
	Add(8,28424,1,0,0,25142,30); // CHUBBY EARTHWORM TALISMAN
	Add(8,28413,1,0,0,25142,10); // LESSER TUNA TALISMAN
	Add(8,28416,1,0,0,25142,10); // LESSER LEAF TALISMAN
	Add(8,28419,1,0,0,25142,10); // LESSER BUNNY TALISMAN
	Add(8,28414,1,0,0,28413,1,25142,30); // INTERMEDIATE TUNA TALISMAN
	Add(8,28417,1,0,0,28416,1,25142,30); // INTERMEDIATE LEAF TALISMAN
	Add(8,28420,1,0,0,28419,1,25142,30); // INTERMEDIATE BUNNY TALISMAN
	Add(8,28415,1,0,0,28414,1,25142,90); // SUPERIOR TUNA TALISMAN
	Add(8,28418,1,0,0,28417,1,25142,90); // SUPERIOR LEAF TALISMAN
	Add(8,28421,1,0,0,28420,1,25142,90); // SUPERIOR BUNNY TALISMAN
	
	Add(9,13454,1,0,0,1127,1,7914,20,6746,50,6277,1,671,10); // CRIMSON SABER
	Add(9,21015,1,0,0,13414,1,7914,20,6746,50,6277,1,671,10); // CRIMSON SWORD
	Add(9,1498,1,0,0,1411,1,7914,20,6746,50,6277,1,671,10); // CRIMSON LANCE
	Add(9,1443,1,0,0,1422,1,7914,20,6746,50,6277,1,671,10); // CRIMSON SPEAR
	Add(9,18130,1,0,0,1720,1,7914,20,6746,50,6277,1,671,10); // CRIMSON BOW
	Add(9,28007,1,0,0,1270,1,7914,20,6746,50,6277,1,671,10); // CRIMSON KATAR
	Add(9,28705,1,0,0,13038,1,7914,20,6746,50,6277,1,671,10); // CRIMSON DAGGER
	Add(9,1839,1,0,0,1813,1,7914,20,6746,50,6277,1,671,10); // CRIMSON KNUCKLE
	Add(9,16040,1,0,0,1517,1,7914,20,6746,50,6277,1,671,10); // CRIMSON MACE
	Add(9,1680,1,0,0,1624,1,7914,20,6746,50,6277,1,671,10); // CRIMSON WAND
	Add(9,2025,1,0,0,1647,1,7914,20,6746,50,6277,1,671,10); // CRIMSON STAFF
	Add(9,28106,1,0,0,1387,1,7914,20,6746,50,6277,1,671,10); // CRIMSON AXE
	Add(9,1939,1,0,0,1919,1,7914,20,6746,50,6277,1,671,10); // CRIMSON VIOLIN
	Add(9,1995,1,0,0,1980,1,7914,20,6746,50,6277,1,671,10); // CRIMSON WHIP
	Add(9,13127,1,0,0,13107,1,7914,20,6746,50,6277,1,671,10); // CRIMSON REVOLVER
	Add(9,13327,1,0,0,13304,1,7914,20,6746,50,6277,1,671,10); // CRIMSON HUUMA
	
	Add(10,18971,1,0,0,5007,1,7844,20,7231,50,7879,1,671,10); // OLD RUNE CIRCLET - RK
	Add(10,18972,1,0,0,5122,1,7844,20,7231,50,7879,1,671,10); // OLD MITRA - AB
	Add(10,18973,1,0,0,5126,1,7844,20,7231,50,7879,1,671,10); // OLD DRIVER BAND - MC
	Add(10,18974,1,0,0,5126,1,7844,20,7231,50,7879,1,671,10); // OLD DRIVER BAND YELLOW - MC
	Add(10,18975,1,0,0,5127,1,7844,20,7231,50,7879,1,671,10); // OLD SHADOW HANDICRAFT- SC
	Add(10,18976,1,0,0,5123,1,7844,20,7231,50,7879,1,671,10); // OLD MINSTREL SONG HAT- MS
	Add(10,18977,1,0,0,5398,1,7844,20,7231,50,7879,1,671,10); // OLD MIDAS WHISPER - GN
	Add(10,18978,1,0,0,5123,1,7844,20,7231,50,7879,1,671,10); // OLD MAGIC STONE HAT - WL
	Add(10,18979,1,0,0,18752,1,7844,20,7231,50,7879,1,671,10); // OLD BLAZING SOUL - SR
	Add(10,18980,1,0,0,2246,1,7844,20,7231,50,7879,1,671,10); // OLD WIND WHISPER - SO
	Add(10,18981,1,0,0,5002,1,7844,20,7231,50,7879,1,671,10); // OLD DYING SWAN - WD
	Add(10,18982,1,0,0,5124,1,7844,20,7231,50,7879,1,671,10); // OLD PROTECT OF CROWN- RG
	Add(10,18983,1,0,0,5128,1,7844,20,7231,50,7879,1,671,10); // OLD CIRCLET OF BONES - GX
	Add(10,18984,1,0,0,5003,1,7844,20,7231,50,7879,1,671,10); // OLD COMOUFLAGE OF RABBIT HOOD - RR
	
	Add(11,13036,1,0,0,31159,100);  //	Brave Assassin's Damascus
	Add(11,13411,1,0,0,31159,100); // 	Brave Gladiator Blade
	Add(11,1183,1,0,0,31159,100); //	Brave Assaulter's Katzbalger
	Add(11,1425,1,0,0,31159,100); //	Assaulter Spear
	Add(11,1632,1,0,0,31159,100); //	Warlock's Magic Wand 
	Add(11,1634,1,0,0,31159,100); //	Strong Recovery Wand 
	Add(11,1543,1,0,0,31159,100); //	Brave Battlefield Morning Star
	Add(11,1380,1,0,0,31159,100); //	Brave Insane Battle Axe
	Add(11,13305,1,0,0,31159,100); //	Brave Huuma Front Shuriken
	Add(11,1739,1,0,0,31159,100); //	Brave Battle CrossBow
	Add(11,1279,1,0,0,31159,100); //	Brave Carnage Katar
	Add(11,1924,1,0,0,31159,100); //	Brave Battlefield Guitar
	Add(11,1978,1,0,0,31159,100); //	Brave Battle Lariat
	Add(11,1574,1,0,0,31159,100); //	Brave Battle Strategy Book
	Add(11,1824,1,0,0,31159,100); //	Brave Battle Fist
	Add(11,13108,1,0,0,31159,100); //	Soldier Revolver
	Add(11,13172,1,0,0,31159,100); //	Soldier Gatling Gun
	Add(11,13174,1,0,0,31159,100); //	Soldier Grenade Launcher
	
	Add(12,13037,1,0,0,31159,100); //	Valorous Assassin's Damascus
	Add(12,13410,1,0,0,31159,100); //	Valorous Gladiator Blade
	Add(12,1184,1,0,0,31159,100); //	Valorous Assaulter's Katzbalger
	Add(12,1482,1,0,0,31159,100); //	Assaulter Lance 
	Add(12,1633,1,0,0,31159,100); //	Warlock's Battle Wand
	Add(12,1635,1,0,0,31159,100); //	Speedy Recovery Wand
	Add(12,1542,1,0,0,31159,100); //	Valorous Battlefield Morning Star
	Add(12,1379,1,0,0,31159,100); //	Valorous Insane Battle Axe
	Add(12,13306,1,0,0,31159,100); //	Valorous Huuma Front Shuriken
	Add(12,1738,1,0,0,31159,100); //	Valorous Battle CrossBow
	Add(12,1280,1,0,0,31159,100); //	Valorous Carnage Katar
	Add(12,1923,1,0,0,31159,100); //	Valorous Battlefield Guitar
	Add(12,1977,1,0,0,31159,100); //	Valorous Battle Lariat
	Add(12,1575,1,0,0,31159,100); //	Valorous Battle Strategy Book
	Add(12,1823,1,0,0,31159,100); // 	Valorous Battle Fist
	Add(12,13171,1,0,0,31159,100); // 	Soldier Rifle
	Add(12,13173,1,0,0,31159,100); //  	Soldier Shotgun
	
	Add(13,2538,1,0,0,31159,50); //  	Captain's Manteau
	Add(13,2539,1,0,0,31159,50); //	Commander's Manteau
	Add(13,2540,1,0,0,31159,50); //	Sheriff's Manteau
	Add(13,2435,1,0,0,31159,50); //	Battle Greaves
	Add(13,2436,1,0,0,31159,50); //	Combat Boots 
	Add(13,2437,1,0,0,31159,50); //	Battle Boots 
	Add(13,2376,1,0,0,31159,80); //	Assaulter Plate
	Add(13,2377,1,0,0,31159,80); //	Elite Engineer Armor
	Add(13,2378,1,0,0,31159,80); //	Assassin Robe
	Add(13,2379,1,0,0,31159,80); //	Warlock's Battle Robe
	Add(13,2380,1,0,0,31159,80); //	Medic's Robe
	Add(13,2381,1,0,0,31159,80); // 	Elite Archer Suit
	Add(13,2382,1,0,0,31159,80); //	Elite Shooter Suit
	Add(13,2733,1,0,0,31159,500); //	Sheriff Badge
	Add(13,2720,1,0,0,31159,500); //	Medal of Honor
	Add(13,2721,1,0,0,31159,500); //	Medal of Honor
	Add(13,2722,1,0,0,31159,500); //	Medal of Honor
	Add(13,2723,1,0,0,31159,500); //	Medal of Honor 
	Add(13,2724,1,0,0,31159,500); //	Medal of Honor
	Add(13,2725,1,0,0,31159,500); //	Medal of Honor
	
	Add(14,12269,1,0,0,31159,10); //	Tasty Pink Ration 
	Add(14,12270,1,0,0,31159,10); //	Tasty White Ration   
	Add(14,12271,1,0,0,31159,10); //	Military Ration A  
	Add(14,12272,1,0,0,31159,10); //	Military Ration B  
	Add(14,12273,1,0,0,31159,10); //	Military Ration C  
	
	
	
// -----------------------------------------------------------

	freeloop(0);
	set .menu$,"";
	for(set .@i,1; .@i<=getarraysize(.Shops$); set .@i,.@i+1) {
		set .menu$, .menu$+.Shops$[.@i]+":";
		npcshopdelitem "qshop"+.@i,909;
	}
	end;

OnMenu:
	set .@size, getarraysize(@i);
	if (!.@size) set .@i, select(.menu$);
	else if (.@size == 1) set .@i, @i[0];
	else {
		for(set .@j,0; .@j<.@size; set .@j,.@j+1)
			set .@menu$, .@menu$+.Shops$[@i[.@j]]+":";
		set .@i, @i[select(.@menu$)-1];
	}
	deletearray @i[0],getarraysize(@i);
	if (.Shops$[.@i] == "") {
		message strcharinfo(0),"An error has occurred.";
		end;
	}
	dispbottom "Select one item at a time.";
	callshop "qshop"+.@i,1;
	npcshopattach "qshop"+.@i;
	end;

OnBuyItem:
	// .@q[] : RewardID, BoughtAmt, RewardAmt, BaseAmt, ReqZeny, ReqPts, { ReqItem, ReqAmt, ... }
	setarray .@q[0],@bought_nameid[0],((@bought_quantity[0] > .MaxStack)?.MaxStack:@bought_quantity[0]);
	copyarray .@q[3],getd(".q_"+.@q[0]+"[0]"),getarraysize(getd(".q_"+.@q[0]));
	set .@q[2],.@q[1]*.@q[3];
	if (!.@q[2] || .@q[2] > 30000) {
		message strcharinfo(0),"You can't purchase that many "+getitemname(.@q[0])+".";
		end;
	}
	mes "[Quest Shop]";
	mes "Reward: ^0055FF"+((.@q[2] > 1)?.@q[2]+"x ":"")+Slot(.@q[0])+"^000000";
	mes "Requirements:";
	if (.@q[4]) mes " > "+Chk(Zeny,.@q[4]*.@q[1])+(.@q[4]*.@q[1])+" Zeny^000000";
	if (.@q[5]) mes " > "+Chk(getd(.Points$[0]),.@q[5]*.@q[1])+(.@q[5]*.@q[1])+" "+.Points$[1]+" ("+getd(.Points$[0])+"/"+(.@q[5]*.@q[1])+")^000000";
	if (.@q[6]) for(set .@i,6; .@i<getarraysize(.@q); set .@i,.@i+2)
		mes " > "+Chk(countitem(.@q[.@i]),.@q[.@i+1]*.@q[1])+((.ShowID)?"{"+.@q[.@i]+"} ":"")+Slot(.@q[.@i])+" ("+countitem(.@q[.@i])+"/"+(.@q[.@i+1]*.@q[1])+")^000000";
	next;
	setarray @qe[1], getiteminfo(.@q[0],5), getiteminfo(.@q[0],11);
	if (@qe[2] > 0 && ((@qe[1] & 1) || (@qe[1] & 256) || (@qe[1] & 512) || (@qe[1] & 1024) || (@qe[1] & 2048) || (@qe[1] & 4096) || (@qe[1] & 4) || (@qe[1] & 8192)))
		set .@preview,1;
	addtimer 1000, strnpcinfo(0)+"::OnEnd";
	while(1) {
		switch(select(" ~ Purchase ^0055FF"+getitemname(.@q[0])+"^000000:"+((.@preview && !@qe[7])?" ~ Preview...":"")+": ~ ^777777Cancel^000000")) {
		case 1:
			if (@qe[0]) { 
				mes "[Quest Shop]";
				mes "You're missing one or more quest requirements.";
				close;
			}
			if (!checkweight(.@q[0],.@q[2])) {
				mes "[Quest Shop]";
				mes "^FF0000You need "+(((.@q[2]*getiteminfo(.@q[0],6))+Weight-MaxWeight)/10)+" additional weight capacity to complete this trade.^000000";
				close;
			}
			if (.@q[4]) set Zeny, Zeny-(.@q[4]*.@q[1]);
			if (.@q[5]) setd .Points$[0], getd(.Points$[0])-(.@q[5]*.@q[1]);
			if (.@q[6]) for(set .@i,6; .@i<getarraysize(.@q); set .@i,.@i+2)
				delitem .@q[.@i],.@q[.@i+1]*.@q[1];
			getitem .@q[0],.@q[2];
			if (.Announce) announce strcharinfo(0)+" has created "+((.@q[2] > 1)?.@q[2]+"x "+getitemname(.@q[0]):A_An(getitemname(.@q[0])))+"!",0;
			specialeffect2 699;
			close;
		case 2:
			setarray @qe[3], getlook(LOOK_HEAD_BOTTOM), getlook(LOOK_HEAD_TOP), getlook(LOOK_HEAD_MID), getlook(LOOK_ROBE), 1;
			if ((@qe[1] & 1) || (@qe[1] & 4096)) changelook LOOK_HEAD_BOTTOM, @qe[2];
			else if ((@qe[1] & 256) || (@qe[1] & 1024)) changelook LOOK_HEAD_TOP, @qe[2];
			else if ((@qe[1] & 512) || (@qe[1] & 2048)) changelook LOOK_HEAD_MID, @qe[2];
			else if ((@qe[1] & 4) || (@qe[1] & 8192)) changelook LOOK_ROBE, @qe[2];
			break;
		case 3:
			close;
		}
	}

OnEnd:
	if (@qe[7]) {
		changelook LOOK_HEAD_BOTTOM, @qe[3];
		changelook LOOK_HEAD_TOP, @qe[4];
		changelook LOOK_HEAD_MID, @qe[5];
		changelook LOOK_ROBE, @qe[6];
	}
	deletearray @qe[0],8;
	end;

function Add {
	if (getitemname(getarg(1)) == "null") {
		debugmes "Quest reward #"+getarg(1)+" invalid (skipped).";
		return;
	}
	setarray .@j[0],getarg(2),getarg(3),getarg(4);
	for(set .@i,5; .@i<getargcount(); set .@i,.@i+2) {
		if (getitemname(getarg(.@i)) == "null") {
			debugmes "Quest requirement #"+getarg(.@i)+" invalid (skipped).";
			return;
		} else
			setarray .@j[.@i-2],getarg(.@i),getarg(.@i+1);
	}
	copyarray getd(".q_"+getarg(1)+"[0]"),.@j[0],getarraysize(.@j);
	npcshopadditem "qshop"+getarg(0),getarg(1),((.ShowZeny)?getarg(3):0);
	return;
}

function Chk {
	if (getarg(0) < getarg(1)) {
		set @qe[0],1;
		return "^FF0000";
	} else
		return "^00FF00";
}

function Slot {
	set .@s$,getitemname(getarg(0));
	switch(.ShowSlot) {
		case 1: if (!getitemslots(getarg(0))) return .@s$;
		case 2: if (getiteminfo(getarg(0),2) == 4 || getiteminfo(getarg(0),2) == 5) return .@s$+" ["+getitemslots(getarg(0))+"]";
		default: return .@s$;
	}
}

function A_An {
	setarray .@A$[0],"a","e","i","o","u";
	set .@B$, "_"+getarg(0);
	for(set .@i,0; .@i<5; set .@i,.@i+1)
		if (compare(.@B$,"_"+.@A$[.@i])) return "an "+getarg(0);
	return "a "+getarg(0);
}
}

function	script	qshop	{
	deletearray @i[0],getarraysize(@i);
	for(set .@i,0; .@i<getargcount(); set .@i,.@i+1)
		set @i[.@i],getarg(.@i);
	doevent "quest_shop::OnMenu";
	end;
}


// Dummy shop data -- copy as needed.
//============================================================
-	shop	qshop1	-1,909:-1
-	shop	qshop2	-1,909:-1
-	shop	qshop3	-1,909:-1
-	shop	qshop4	-1,909:-1
-	shop	qshop5	-1,909:-1
-	shop	qshop6	-1,909:-1
-	shop	qshop7	-1,909:-1
-	shop	qshop8	-1,909:-1
-	shop	qshop9	-1,909:-1
-	shop	qshop10	-1,909:-1
-	shop	qshop11	-1,909:-1
-	shop	qshop12	-1,909:-1
-	shop	qshop13	-1,909:-1
-	shop	qshop14	-1,909:-1